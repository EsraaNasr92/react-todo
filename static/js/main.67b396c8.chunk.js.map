{"version":3,"sources":["component/images/iconCross.svg","component/Todo.js","component/TodoForm.js","component/Header.js","component/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todo","index","CompleteTodo","removeTodo","handleEditClick","id","isCompleted","style","textDecoration","className","onClick","text","src","iconCross","alt","TodoForm","addTodo","React","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","Header","FilterButton","props","aria-pressed","isPressed","setFilter","name","FILTER_MAP","All","Active","task","Complete","FILTER_NAMES","Object","keys","App","todos","setTodos","newTodos","splice","isEditing","setIsEditing","currentTodo","setCurrentTodo","filter","aria-label","disabled","updatedTodo","updatedItem","map","handleUpdateTodo","placeholder","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67b396c8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iconCross.6ee81d30.svg\";","import React from 'react'\nimport iconCross from './images/iconCross.svg'\n\nfunction Todo({ todo, index, CompleteTodo, removeTodo, handleEditClick  }){\n\n  let id= '';\n  if(todo.isCompleted){\n    id += 'checked';\n  }\n\n  return(\n    <div style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}>\n      <button id={id} className=\"checkbox\" onClick={() => CompleteTodo(index)}></button>\n        {todo.text}\n      <button className=\"close\" onClick={() => removeTodo(index)}>\n        <img src={iconCross} alt=\"Remove todo\" />\n      </button>\n      <button className=\"edit\" onClick={() => handleEditClick(todo)}><i className=\"fas fa-edit\"></i></button>\n    </div>\n  )\n}\n\nexport default Todo;\n","import React from 'react'\n\nfunction TodoForm({ addTodo }){\n\n  const [value, setValue] = React.useState(\"\");\n\n   const handleSubmit = e => {\n     e.preventDefault();\n     if (!value) return;\n     addTodo(value);\n     setValue(\"\");\n   };\n\n   return (\n\n       <form onSubmit={handleSubmit}>\n         <input\n           type=\"text\"\n           className=\"input\"\n           value={value}\n           onChange={e => setValue(e.target.value)}\n         />\n       </form>\n     );\n}\n\nexport default TodoForm\n","import React from 'react'\nimport './style/Style.css'\n\nfunction Header() {\n  return(\n    <div className=\"header\">\n      <div className=\"header-content\">\n        <h2>Todo</h2>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction FilterButton(props) {\n  return (\n\n      <button\n        type=\"button\"\n        className=\"btn toggle-btn\"\n        aria-pressed={props.isPressed}\n        onClick={() => props.setFilter(props.name)}\n      >\n        <li>{props.name}</li>\n      </button>\n\n\n\n\n\n  );\n}\n\nexport default FilterButton;\n","import React, { useState } from 'react'\nimport Todo from './component/Todo'\nimport TodoForm from './component/TodoForm'\nimport Header from './component/Header'\nimport Footer from './component/Footer'\nimport FilterButton from './component/FilterButton'\n\n// for filter\nconst FILTER_MAP ={\n  All: () => true,\n  Active: task => !task.isCompleted,\n  Complete: task => task.isCompleted\n}\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App() {\n\n    const [todos, setTodos ] = React.useState([\n      { id: \"1\", text: \"Complete online JavaScript course\", isCompleted: false },\n      { id: \"2\", text: \"Jog arounf the park 3X\", isCompleted: false },\n      { id: \"3\", text: \"10 minutes meditation\", isCompleted: false },\n      { id: \"4\", text: \"Pick up groceries\", isCompleted: false },\n      { id: \"5\", text: \"Complete online HTML, CSS course\", isCompleted: false },\n      { id: \"6\", text: \"Go out with my friends\", isCompleted: false },\n\n    ])\n\n    //Add new task\n    const addTodo = text => {\n      const newTodos = [...todos, { text }]\n      setTodos(newTodos)\n    }\n\n    // update a complete a task\n    const CompleteTodo = index => {\n      const newTodos = [...todos];\n      newTodos[index].isCompleted = true;\n      setTodos(newTodos);\n    }\n\n    // Remove a task\n    const removeTodo = index =>{\n      const newTodos = [...todos];\n      newTodos.splice(index,1);\n      setTodos(newTodos);\n    }\n\n\n    // Update todo\n    const [ isEditing, setIsEditing ] = useState(false)\n    const [ currentTodo, setCurrentTodo ] = useState({})\n\n    // function to get the value of the edit input and set the new state\n    function handleEditInputChange(e) {\n      setCurrentTodo({ ...currentTodo, text: e.target.value });\n      //console.log(currentTodo);\n    }\n    // function to handle when the \"Edit\" button is clicked\n    function handleEditClick(todo) {\n      setIsEditing(true);\n      setCurrentTodo({ ...todo });\n    }\n\n     // function to edit a todo item\n     function handleUpdateTodo(id, updatedTodo) {\n       const updatedItem = todos.map((todo) => {\n         return todo.id === id ? updatedTodo : todo;\n       });\n\n       setIsEditing(false);\n       setTodos(updatedItem);\n     }\n\n     function handleEditFormSubmit(e) {\n        e.preventDefault();\n        handleUpdateTodo(currentTodo.id, currentTodo);\n      }\n\n\n      // Add filter\n      const [filter, setFilter] = useState('All')\n\n\n      // Remove Completed Task\n      const removeCompletedTodo = id => {\n        setTodos(todos.filter(todo => todo.isCompleted !== true));\n      };\n\n\n\n\n    return(\n      <div id=\"main\">\n        <Header />\n\n        {isEditing ? (\n          <div className=\"current-typing\">\n          <button className=\"checkbox\" name=\"current-task\" aria-label=\"add task\" disabled></button>\n            <form onSubmit={handleEditFormSubmit}>\n              <div className=\"editInput\">\n                <input\n                  name=\"editTodo\"\n                  type=\"text\"\n                  placeholder=\"Edit todo\"\n                  value={currentTodo.text}\n                  onChange={handleEditInputChange}\n                  className=\"input\"\n                />\n              </div>\n              <div className=\"btn-group\">\n                  <button className=\"btn-update\" type=\"submit\">Update</button>\n                  <button className=\"btn-cancel\" onClick={() => setIsEditing(false)}>Cancel</button>\n              </div>\n            </form>\n\n          </div>\n          ) : (\n            <div className=\"current-typing\">\n              <button className=\"checkbox\" name=\"current-task\" aria-label=\"add task\" disabled></button>\n              <TodoForm addTodo={addTodo} id=\"task\" placeholder=\"Currently typing\"/>\n            </div>\n        )}\n\n          <div className=\"todo-app\">\n            <div className=\"todo-list\">\n              <ul className=\"list\">\n                  {todos.filter(FILTER_MAP[filter]).map(( todo, index) => (\n                    <li key={index}>\n                      <div className=\"arrange\">\n                        <Todo\n                          key={index}\n                          todo={todo}\n                          index={index}\n                          CompleteTodo={CompleteTodo}\n                          removeTodo={removeTodo}\n                          handleEditClick={handleEditClick}\n                        />\n                      </div>\n                    </li>\n                ))}\n            </ul>\n            <div className=\"todo-footer\">\n                <div className=\"\"> {todos.filter(todo => todo.id).length}    items left</div>\n                 <div className=\"filter\">\n                    <ul>\n                        {FILTER_NAMES.map(name => (\n                          <li key={name}>\n                              <FilterButton\n                                key={name}\n                                name={name}\n                                isPressed={name === filter}\n                                setFilter={setFilter}\n                               />\n                            </li>\n                        ))}\n                      </ul>\n                    </div>\n              <div className=\"clearCompleted\"><button onClick={() => removeCompletedTodo()}>Clear Completed</button></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}